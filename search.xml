<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python学习笔记-1]]></title>
    <url>%2F2018%2F07%2F05%2FPython%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1%2F</url>
    <content type="text"><![CDATA[记录学习Python的点点滴滴， 主要是记录自己记不住的地方。 第二章 变量和简单数据类型字符串 Python中的字符串既可以是双引号&quot; 也可以是单引号&#39;引起来的字符串。 .title() 返回将字符串中所有单词首字母大写. .upper() 转为大写字母串, .lower() 转成小写字符串 直接使用+可以对字符串进行相加 .strip() 返回一个删除左右空白的字符串。 .lstrip()去头空白 .rstrip() 去尾空白 数字 Python中用两个星号**表示幂次 例如： 12&gt;&gt;&gt; 10 ** 61000000 注释 Python使用井号#进行注释 第三章 列表（数组） array[-1]访问数组的最后一个元素。 同理， -2， -3分别是倒数第二个， 倒数第三个。 列表是动态的。 添加、删除元素 添加元素 .append(e) 在末尾添加元素e。 .insert(pos, e) 在pos位置添加元素e 删除元素 del 列表名[下标] 删除指定下标元素 .pop() 删除（弹出）列表尾部元素 .pop(pos) 弹出pos位置的元素 .remove(e) 删除指定元素e（第一次出现的） 组织列表（排序） 使用sort()对列表永久性排序 123456cars = ['bnw', 'audi', 'toyota', 'subaru']print(cars)cars.sort() # 正序排序print(cars)cars.sort(reverse = True) #反序排序print(cars) 使用sorted()对列表临时排序 1234cars = ['bnw', 'audi', 'toyota', 'subaru']print(sorted(cars)) # 临时排序print(cars)print(sorted(cars, reverse = True)) #临时倒序排序 .reverse()使列表反转 len(array)获得列表array的长度 第四章 列表的一系列操作循环基本循环语句: 1234for [变量名] in [列表名]: #相应的操作 #具体控制几条语句跟缩进有关 #每一个缩进的代码都是循环的一部分 for循环要执行的代码块用一个缩进表示受for循环的控制， 所以要严格控制缩进。 range()12345for value in range(st, ed):#生成区间[st, ed)的数字for value in range(st, ed, dt):#增量为dt的生成数字从st到ed, 也是[st, ed) 举例： 12for x in range(1, 6): print(x) 输出： 1234512345 可使用numbers = list(range(开始位置, 结束位置 [ ,增量]))直接创建列表 min() max() sum() min(列表)可以直接求出列表中最小值， max同理 sum(列表)对列表求和 $10^6$ 0.15s $10^7$大概1s $10^8$大概要12s， 最久一次用了22s 列表解析列表解析将for循环和创建新元素合并为一行， 并自动赋值 基本格式： 1列表名 = [表达式 for 变量名 in range(st, ed)] 注意： for循环的末位没有冒号: 切片 — 处理列表的部分元素访问方法： 123456789101112cars = ['bnw', 'audi', 'toyota', 'subaru']print(cars[0:3]) #访问列表cars[0,3)print(cars[:2])#从头到第二个[0, 2)print(cars[1:])#从1到尾#同理可以使用之前学过的负数（倒数第几个）#运用到for循环中for car in cars[:3]: print(car.title() + "is good car") 复制列表语法： 1新列表 = 旧列表[st:ed] 注意下列情况： 123456789cars = ['bnw', 'audi', 'toyota', 'subaru']car2 = cars[:]car3 = carscars.append("lanbo")print (car2)print (car3) 输出的结果为： 12['bnw', 'audi', 'toyota', 'subaru']['bnw', 'audi', 'toyota', 'subaru', 'lanbo'] 所以如果直接赋值， 应该类似于java中的将旧列表的引用赋值给了新列表， 没有新建一个列表。 也就是两个变量指向同一个列表 元祖 — 不可变的列表语法： 1元祖名 = (元素， 元素，、、) 元素不可变， 但是变量（元祖名）可以重新指向一个新的元祖]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iPhone5C重生记]]></title>
    <url>%2F2018%2F07%2F04%2FiPhone5C%E9%87%8D%E7%94%9F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[我的iPhone5C在一年半前进水坏掉了， 刚开始只是开机键失灵， 导致自动锁屏亮屏， 一按home键就自动截屏。 拆开过好几次都没有修好， 后来就入了小米5s，5c就拆开晾在一边了。 有过想法把他放到相框里裱起来， 比较有科技范。但是一直都没找到合适的相框。 于是小C就一直躺在抽屉里。 前两天在淘宝花了130块买了一套总成，（也就是除了屏幕和主板其他都有）。 顺便颜色也换了， 原来是蓝色的， 买了个白色的。 买回来第一时间装机， 顺利亮屏！ 开心。简单的测试了一下都没什么问题（相机、 震动、 外放、蓝牙什么的）。 系统是IOS10， 随便逛了逛以前常去的威锋论坛和5C贴吧， 发现IOS10竟然可以越狱了！ 果断第一时间越狱。 看到了熟悉的Cydia。 简单使用了一段时间我发现wifi特别弱， 只能搜到我电脑的wifi而且有效距离基本只有1m 2m。 电脑在下面 我上了床基本就没信号了。 刚开始以为是排线不行， 后来仔细回想了一下发现排线那个线我没有接到主板上， 果断再次拆机， 接上了wifi排线。 再开机。 哈哈 wifi回来了！ 顺便下了一个查看wifi信号强度的插件。 还有其他各种越狱插件折腾哈哈哈。]]></content>
      <categories>
        <category>个人日记</category>
      </categories>
      <tags>
        <tag>个人日记</tag>
        <tag>拆机</tag>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十届四川省赛总结]]></title>
    <url>%2F2018%2F06%2F04%2F%E7%AC%AC%E5%8D%81%E5%B1%8A%E5%9B%9B%E5%B7%9D%E7%9C%81%E8%B5%9B%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[周六热身赛:一共四个题， 都不是难题， 或者说都是原题。 其中还有中文题😂， 很快四道题都顺利AC了。然后就开始调试电脑环境。 主办方电脑给的环境也好评， 提交题目用的PC^2 ,也自带了我们平时用的Vim。 java的IDE也有eclipse和idea。 就在不停地调戏评测机。热身赛结束之后去食堂吃个饭就回酒店了。 主办方的伙食也不错， 南瓜汤真好喝😂。 周天正式赛:正式赛一共11道题， 我们最终过了6道题， 凭借着前期手速快+罚时少， 后期挂机两小时的状态最终留在了金牌区的尾巴。 8点55分的时候， 志愿者们开始发题目， 发下来比赛还没开始大家就开始看题了， 我犹豫了一下， 大佬说赶紧看题啦， 别人都在那看呢。 而且比赛提前开始了两分钟左右。 我上来从前往后读， 先看数据范围和样例猜哪个简单， 发现B的样例比较水， 就开始读B。确实不难， 这时候大佬一看榜， H已经过了好几个队了， 看来是个很水很水的题，赶紧先过去看H。 H题题意: T组数据， 每组数据有三个数$x, y, z$。 $x, y$已经给定，问你需要将$z$变成多少能够使得这三个数的gcd的和尽可能大。显然让z为$lcm(x, y)$最优， 这样的话答案就是$gcd(x,y) + x + y $。 过H题时间是8分钟。 已经很慢了。但是要稳住心态， 我发现B题还没有人交， 而且我已经知道B题题意了， 紧接着跟大佬说了一下B题的题意， 并且大佬发现E题应该是个模拟题，就扔给TRDD解决了。 B题题意: 给你四个人名，有T组数据， 每组数据给你一个字符串s， 问s是否能够通过某个人的人名删掉一些字母或者空格得到。 如果能或者有多个， 先输出有几个人， 再按照字典序输出人名。 E题题意: T组数据， 每组数据给你AA/BB/CC的时间， 问以MM/DD/YY和YY/MM/DD的格式对应的日期是否是同一天， 如果是同一天输出对应的填是哪月哪日哪年， 如果不是同一天则输出两种格式对应日期的天数差。 默认年份是20YY。 大佬在机位写B， TRDD在构思E题， 我在旁边继续读题。发现了G题题意简介明了。 G题题意: ans = \sum_{i=1}^{n}\sum_{j=1}^i(n \% (i\times j))数据范围： $(1 \le n \le 10^{11})$ 看来G题不是个简单题， 先放一放再说。 然后看F的数据范围也不是很大， 就看起了F题。 读完之后感觉也十分可做。 F题题意： T($1\le T \le 10$)组数组， 每组数据给一个长度为n($1\le n \le 2000$)的数组a($0 \le a_i \le 10^9$). 对于区间长度为奇数[l,r]， 这段区间的值为0. 对于区间长度为偶数[l,r]， 这段区间的值为$x = \frac {r-l+1}{2} $前x大的和减去前x小的和。 紧接着大佬也写完了B， 仔细检查了一下输出的人名之后， 确定数据范围还有多组清空都没有问题， 交！1A. 过B题时间是27分钟。 然后TRDD去上E题， 我和大佬讲了一下F题的题意。说完之后我说题有一句话很重要， 题里写到It is possible that all of the T test case are big enough within one test file可能意思是要求在$O(n^2)$复杂度求解， 会卡$O(n^2log(n)) $复杂度。。 大佬说先想想， 然后我看榜有人过I题了， 我又转身去读I题。 发现I题比F题更简单。 怪不得过的人那么多。 I题题意:T组数据， 每组数据给你一颗n个点的树($\sum n \le 2 \times 10^5$), 每个点有一个点权值$s_i, (0\le s_i \le 2\times 10^5)$ 你可以删掉一个点， 连带着删掉改点相连的所有的边， 形成多棵树， 每棵树的值为这棵树点权值之和。如何删点可以使得树的点权值之和的最大值尽可能小， 输出最大值最小有多小。 我和大佬决定先写I题， F题先放一下， 这时候TRDD的E题写完了， 检查了一下没什么问题， 这时候TRDD问如果01/01/01这种数据该怎么办， 我俩思索了一番， 觉得输出0十分有道理， 就交了一发。 然后返回了Wa。。赶紧打印一下代码， 大佬去上I题， 我和TRDD查一下E题。 我又读了一遍E题题意， 忽然觉得01/01/01这种数据应该是输出具体天数， 和TRDD讨论了一番， 觉得这是一个坑点， 先改一下， 然后TRDD发现自己在判闰年的时候是那YY两位数年份去判断的， 输出的时候直接多加一个20， 显然这样挫掉啊， 先整体+2000变成20YY年， 再去做判断才是正确的。 找到两个坑点， 这时候大佬的I题也写完了， 检查了一下数据范围和清空， 没啥问题， 交！ TLE了！！ 大佬下来看一下数据范围， TRDD赶紧上去改E。 果然就是之前说的两个bug。 AC。 过E题的时间是73分钟。这时候大佬也返现了I题TLE的原因， 题目中数据给的是($\sum n \le 2 \times 10^5$)， 在T很大， n很小的时候，如果直接暴力memset清空就会TLE了。 改了一下， 过了。 过I题的时间是78分钟 然后我跟他俩说了一下J题的题意， 我再上去写F题。 J题题意： T组数据， 你需要猜一个长度为n的数组a($1\le n \le 500$)， 给你一个长度为$n*(n-1)/2$的数组S， 每次非递降的给你S中的一个数， S中的数是从a数组中任意挑两个数相加得到的。 问你最少需要通过得到几个数能猜出来a数组。 保证$a_1$ = 0; TRDD和大佬去想J了， 我在机器上写F。 F很快就写完了， 用两个对顶堆维护一下， 很好写。 不太敢交。。 因为除了打星的重庆大学队伍再没有人过这道题了。。。 大佬怂恿我交了一发。 竟然AC了！ 小开心。 过J题的时间是113分钟，（赛后发现标程是$O(n^2)$复杂度， 并且学长队也是写的$O(n^2log(n)) $复杂度， 就是一直TLE）我们应该是卡着极限时间过去的😂。 这时候大佬和TRDD的J还没有思路， 金牌区大部分队都过了J， 这就有点慌了。 我对这种题完全没有思路， 我们三个就一起讨论这道题。 讨论了一会， 还是无解， 这题这么难的么？？ 然后我就又读了一遍题， 又重新把题意跟他俩说了一遍， 这时候大佬说： wc?? $a_i = 0$?? 我： 恩？？？ 我之前不是有说么。 而且还强调了啊。。。 当知道了$a_i = 0$这个信息后， 这道题大佬就秒切了。。。。 几行代码就搞定了。过J题的时间是151分钟。 之后我们就开始了挂机之旅。。。。 挂机分割线 之后我们决定再搏一搏C和D， 我先读了一下C，是一道字符串的题， 跟大佬说了一下题意之后， 大佬觉得是一个AC自动机+DP的算法， 然后我又读了一下D。。。。 读不懂。。。 读了很久都没有读懂。但是知道是树上的题， 我们三个都不太擅长AC自动机这方面，所以决定最后一个多小时就搞D题了。最后一共读出了两种题意， 第一种题意贼简单， 立马写了一发， 交上去Wa了。。 然后又想到了一种题意， 根据这个题意， 我和大佬一商量。。 感觉是树链剖分能解决。 但是我和TRDD都不会。。 大佬也好久没用了。。于是我们三个人就在最后一个半小时现学了树链剖分。最后好不容易把样例调过了， 还有2min比赛就结束了。。 我们三个十分慌张。 赶紧交一发！ wc！ PC2掉了！ 赶紧重登。刚登上去。。比赛就结束了。 交不上去了。。😭赛后跟安神他们讨论了一下发现其实压根题意就是错的。。。 不亏不亏。。。 但是赛后仔细一想， 在读不懂D题的情况下， 其实开C题是比较优的。。。 因为C题再往深了想一想应该会做。。。唉 总结3小时疯狂写题+两小时挂机， 封榜前第九， 最后滑到十四。 整体来说还是比较好的。 当然希望能够打出更好的水平。当然也有不足的地方， 比如最后决策的失误以及我把D题读错了。还有就是分榜之后我们的心态就有点慌张了。希望以后比赛的时候我们能够在最后封榜的时候也出题。]]></content>
      <categories>
        <category>比赛总结</category>
      </categories>
      <tags>
        <tag>比赛总结</tag>
        <tag>省赛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[蓝桥杯c++B组国赛总结]]></title>
    <url>%2F2018%2F05%2F29%2F%E8%93%9D%E6%A1%A5%E6%9D%AFc-B%E7%BB%84%E5%9B%BD%E8%B5%9B%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[5月26号去北京参加比赛， 幸运拿（水）到了国一， 感觉蓝桥杯国赛B组也这么水的吗。。 我最后一题都不会做还能拿这个名次。 我和学弟25号上的火车， 在绿皮车上躺了20+小时， 到北京已经是26号中午了， 比赛下午两点开始， 跟安学长会和， 简单吃了个饭， 直奔赛场。 提前一小时到了北京联合大学， 比赛前半个小时， 莫名紧张起来了。 比赛开始， 一看一共六道题， 两个填空一个代码不全三个大题。 第一题题意， 200元换5元2元1元纸币， 要求2元纸币张数是1元的10倍， 问最少要换多少张， 随手一写，答案74 第二题题意， 长度30的01串， 不能出现相邻的1， 问有多少种， 其实就是个斐波那契数列， dp一下已转移答案就有了。 第三题题意， 求格雷码， 让你补全的部分是用一行代码求出二进制最低位的1然后把这个位左边位反转转换题意就是求异或（lowbit &lt;&lt; 1） 所以答案就是a = a ^ ((a &amp; (-a)) &lt;&lt; 1) 前三个题就这样搞定了， 感觉没啥难度。 第四题题意: 0~n-1 你每次可以+1或者+k，大于等于n就%n。 问到达任意位置最多要多少次。 这个题我是瞎暴力写的， 安学长赛后出来跟我说是直接建图BFS， 我就觉得我的做法凉凉。。。 但是其实对了。 第五题和第六题我卡了很久， 其实后3个小时都在做这两个题。 太菜啦！！！ 第五题 给一个$n * m, (1\le n,m \le 100)$ 的矩阵， .表示可以放积木， X表示不能放积木，并且有一下几个要求： 当前位置方积木保证他的下面也有积木 一层放的积木必须连续可以全都不放。问一共有多少种方法， 方案数$ \% 10 ^ 9 + 7$。 一看就是一个区间DP嘛， 那么设计状态就是$dp[i][l][r]$表示到第i层从l放到r有多少种方案。 但是转移的话如果也暴力枚举第i-1层的区间$[L, R]$的话复杂度就达到了$O(n^5)$, 肯定拿不到满分， 但是为了保证最后一题能顺利做完， 我决定先交个$O(n^5)$， 最后剩点时间再回来一下。 第六题题意: 求 \sum_{i = 1} ^ {10^7}\sum_{j = 1} ^ {10^7}gcd(i, j) \% 10 ^ 9 + 7 傻看了好半天， 又是暴力又是找规律的， 完全不知道怎么写， 知道跟埃式筛素数应该有关系， 但是想不到正解上， 时间一分一秒的过去了， 还是不会， 最后只能先交一个$O(n^3)$的暴力上去了， 这样的话只能拿到30%的分， 但是我发现数据范围中有10%的数据$n==10^5$， 10%的分也是分哇！ 果断用暴力先本地跑一个$10^5$的先， 然后扭头回去优化第五题。这时候考试还剩一小时。 回去看第五题， 确实很容易想到求一个前缀和， 这样就可以优化掉一个n。 最后交了一个$O(n^4)$的， 赛后出来问学长， 学长说你完全可以O(1)转移啊， 也就是说完全可以做到$O(n^3)$的啊， 只需要把前缀和再迭代一次在求一个后缀和， 就可以了。。。。 恩。。 比赛的时候没想到啊。。 觉得$O(n^4)$应该没啥问题。 大概跑了20min， 第六题n==100000的跑出来了， 还好提前输出到文件， 赶紧复制到代码里， 再交一发。 然后再想一想能不能做$nlog(n) $的。。 显然到最后也没想出来。 就这样结束了， 赛后领了一个32G的U盘， 然后就跟学长学弟讨论题目了。。 安学长1个半小时写完就出来了。。。 太强了， 说最后一题欧拉函数可以做$O(n)$复杂度。。恩。。。 确实不会。。 回去学一波。晚上约了一个已经毕业了的学长蹭了个饭， 顺便增长了一下经验。 第二天上午一起床就一直在查成绩， 但是一直没查到， 后来中午我们三个在地铁上的时候CP在群里发了名次， 安学长第五， 果然强。 我也幸运在第一页中间， 这个名次还是有点意外的😂， 毕竟最后一题完全偏分暴力的。。学弟也拿到了国二。 第一次参加蓝桥杯国赛， 感觉。。 跟打蓝桥省赛一样。。。。。。。 希望国一给发奖品 💩。]]></content>
      <categories>
        <category>比赛总结</category>
      </categories>
      <tags>
        <tag>比赛总结</tag>
        <tag>蓝桥杯</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018-5-22组队训练总结]]></title>
    <url>%2F2018%2F05%2F22%2F2018-5-22%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[今天训练的题目是The 2014 Southwestern Europe Regional Contest (2014), 一共过了五道题， 整个比赛的过程感觉状态还比较好。 也算是发挥了正常的水平。 过程比赛一开始， TRDD读D， 我读J， J题题面写的不知道是啥， 但是从输入输出和样例可以看出题意，读完之后虽然感觉不是很可做， 但是还是第一时间跟大佬说了题意， 然后转去读A题。 发现A题是个暴力模拟题， 就跟TRDD说了一下题意， 让他准备写A。 A题题意: 给n个长度不超过10的字符串, $n \le 10 $ 一共最多出现十种大写字母, 每个大写字母唯一对应一个数字$0 \sim 9$, 每个字符串表示一个数， 问有多少种情况满足前n-1个串相加等于最后一个串。 输出方案数，不存在前导0， 长度为1的字符串不能为0. J题题意: 给两个矩阵， 长宽都 $\le 2000$， 问第一个矩阵在第二个矩阵出现了多少次。 然后我就继续读D题， TRDD开始写A， 大佬在想J， 我转过去读D， 读完D题，看J题应该是个难题， 就跟大佬说了一下D题的题意， 先放下J， 想D题， 我继续读B题， 这时候榜上已经陆续有好几个队过B题了。读完B之后发现B确实是个简单图论题， 基本是个最短路， 跟大佬说了一下题意和思路， 觉得没什么问题。 这时候TRDD的A也基本写完了， 在调BUG， 时间紧迫， 让TRDD下来在旁边的机子上查bug， 我先上B。 B题题意: 给一个n个点, m条无向边的图， $1\le n \le 10000$, $1\le m \le 250000$, 之后有m行， 每行三个数$u, v, c$。 u和v之间有一条长度为c的路。现在人们要从0点走到n-1号点， 他们总是走最短路径， 答案要求把所有是0点~n-1点的最短路径的边加起来乘2. 最短路很快就写完了， 放入样例， 运行！ 答案都是零， 查了半天， 哦~原来是起点忘记放到队列里了。。。 压根就没跑最短路， 再编译， 再运行！ 样例不对！ 仔细想了一下， 发现思路稍微有些偏差， 换大佬上， 稍微改了一改， 正反跑了两次最短路， 再枚举所有的边判断一下。 交上去AC! 过B题时间1小时27分在我交B题之前， TRDD的A也查出来Bug在哪了， 这种模拟题基本样例过了就没什么问题了， 交上去， 果然AC。 过A题时间1小时12分 然后我们三个一起搞D题， 这个D题真是噩梦， 卡了我们好久， 刚开始的思路就偏了， 其实正解是二分图匹配， 但是我们想到图论找环上面去了， 想了一个多小时也没想出来， 最后还是女队YYT一语点破。 D题题意: 有n$1\le m \le 10000$个人， m个关系， 每个关系表示A喜欢B的书， 现在要交换这些书， 要每个人都有书并且不是自己的书。 可以的话输出YES， 否则NO。 正解就是裸的二分图匹配， 慌慌张张抄完了板子， 恩。。。 样例又过不了。 查了一下板子， 没问题啊。 大佬又过来帮我查bug， 哦~原来是初始建边的时候建错了。。。 改了一下 AC。 过D题的时间是3小时01分. 我在写D题的时候， 大佬和TRDD在讨论C题， 并且写完了之后也有了结果。 D搞完这后直接继续上C。 中间TLE了一发， 没优化好， 3小时11分， 过了C题。 这期间， TRDD读了F题， 过了C之后， 大佬和TRDD在想F， 我打算再开一题G。 G题题意是真的难懂， 读了三遍， 还是没明白。 其实是有太多单词不认识了。。 后来大佬说不行就不开G了吧， 一起想一想F题。 F题题意: 给你n个矩形， 每行读入矩形的左下角的坐标以及长宽， 保证不会出现矩形重叠。 如果两个矩形有变或者点（角）相交， 则这两个矩形视为一个矩形， 问最后最大的矩形有多大。 然后我和TRDD想G， 大佬去想J， 过了一会， 大佬J题想了一个风险很大的方法，就是复杂度要搏一搏的那种， 用KMP暴力匹配。 大佬写J题， 我继续想G题， 刚开始思路就是需要离散化， 然后矩阵枚举他周围四周的点， 并查集搞一下， 算了一下， 复杂度接受不了， 继续想。 就往边的方向上靠， 突然想到了正解。一共有40000个矩阵， 那么最多有100000个横边， 100000个竖边， 那横边为例， 对于同一行上的， 就可以看成给你c条线段， 每条线段的区间是$L_i, R_i$， 问会并成几部分， 这个问题$O(n)$就可以解决。 所以开一个结构体 存四个值， 所在行(列) , 左右区间(上下）, 所属的矩形标号。 结构体排一下序， 搞一下就可以了了！ 这时候大佬的J刚好写完， 但是还需要调一下Bug， 就到旁边的电脑上调， 跟大佬说了一下我的思路后觉得没太大问题我就开始写G， 这时候还有40多分钟的时间。 写G的过程中， 大佬中间穿插着改了两次J题的bug， 我下来继续脑中构思代码， 大佬改好后直接接着写。 最后这一段时间可以说是配合挺好的了。 虽然交了J之后Tle了， 但是我们还有G啊， 而且我对自己的整个思路比较有信心。 TRDD在旁边看着我写代码， 防止我出现一些低级错误。在TRDD的帮助下， 顺利写完了代码， 测了一下样例， 跑了很奇怪的答案， 查了一下， 很快发现了错误。 发现是并查集的时候标号并错了。 改了一下样例过了， 忐忑一交 ， Wa！ 这时候还有15分钟左右， 赶紧继续查bug。 我觉得我写的已经没什么问题了， 并且TRDD也是一直再旁边看着， 就让大佬过来查bug。 查了一会， 大佬没太理解我的思路， 给我举了几个样例， 我都一一解释了我的代码是如何实现的。 都没问题。最后， 大佬发现了我的致命SB错误！ 并查集那一行代码写挫了。。。 赶紧改掉， 交上去， AC！！ 险过最后一题。 最后五题结束。 总结今天整个过程还可以， 唯一卡主的地方就是D题， 整个思路都错了。通过这场比赛我发现自己写代码不够稳， 每次多多少少都会有一些小的bug 或者思路差那么一点点， 最后都要大佬帮我查查代码再补几行。这样每次都会打乱大佬想其他题的思路， 可能会影响整场比赛。所以说， 以后需要仔细一点， 写代码要稳一些。 能够不需要队友帮助调bug的情况下自己稳定的AC。]]></content>
      <categories>
        <category>比赛总结</category>
      </categories>
      <tags>
        <tag>比赛总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018-5-19组队训练总结]]></title>
    <url>%2F2018%2F05%2F19%2F2018-5-19%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[今天训练赛打的是HDU上面的CCPC2018-湖南全国邀请赛-重现赛. 一共过了6题， 对比现场榜银牌水平， 没有达到预期的效果。 过程比赛一开始TRDD从A开始读， 我从中间开始看， 但是因为是重现赛的原因， 第一分钟就有人过了C题， 我便立马去读C题。 这场比赛所有的题面都很短但是题意贼难理解。我正读着C呢， TRDD跟我说A题水啊！ 一刷新榜一看， A题和B题确实过了好几个队了， TRDD简单的跟我说了一下题意和做法后我觉得并没什么问题就让他上去写了（其实题意读错了）。 然后Wa了一发， 这时候大佬来了， 看了TRDD的代码， TRDD说了一发题意， 大佬说这么写不对啊， 要%￥%￥￥%……这么写， 这时候我在旁边继续看C， 大佬跟TRDD说完A题正解（假的）后，自己看了一眼K， 因为K题题意只有一行 😂。 过了一会又交了一发A， 还是Wa了， 不对劲啊！！ 我赶紧拿过题面再读一遍题， 发现题意搓掉了！！ A题题意: 给你$n+1$个数 $a[0] \sim a[n]$表示有$a[i]$篇论文的引用值为$i$ 让你找到一个最大的h， 使得至少有h篇的论文引用数量大于等于h。这就很水了， 倒着维护后缀和就可以做了。 这样A题在Wa了两发的情况下才过的。 紧接着开的是K题， 大佬让谭瑞找出2018的因子有哪些， 发现只有1, 2, 1009, 2018四个。 K题题意： 给你四个值$a, b, c, d$， 问你有多少对$(x, y)$ 满足$a \le x\le b, c \le y \le d$，并且$x \times y$是2018的倍数。 因为因子只有四个， 只需要区间内找一找个数再乱搞一下就可以了， 但是TRDD写的时候区间边界没有处理好， Wa了一发。 在1小时18分的时候才过的K。 TRDD和大佬在写K的时候， 我看了一下F题， 题意简介明了， 难点在于直接判断乘积会爆long long, 所以没找到突破口，等他们过了K的时候， 跟大佬说了一下F题题意， 大佬秒想到把分子分母反转一下， 再乘积就不会爆long long了， 其实我之前也想到这一步了， 但是脑子还把数据范围停留在没约分之前。。。 自己把自己坑了。 F题题意， 给你n个三元组， 每个元祖有三个值$a, b, c$ 你现在要将这n个元祖排序满足下面的条件并且P数组字典序尽可能小。 \frac{a_{p_{i - 1}} + b_{p_{i - 1}}}{a_{p_{i - 1}} + b_{p_{i - 1}} + c_{p_{i - 1}}} \leq \frac{a_{p_i} + b_{p_i}}{a_{p_i} + b_{p_i} + c_{p_i}}.最后让你输出下标数组P。 这个题的思路就是将分子分母反转， 符号反转， 就可消去$a_i + b_i$ 然后交叉相乘不会爆long long, sort一下就可以过了。 1小时26分过的F题 这时候B题已经过了100来号人了， 我们连B题的题意都不是很清楚。 决定先解决B题再开其他题。花了很长时间把B题题意弄懂了， 刚开始大佬说了一个二分+贪心check的思路， 交了一发， Wa。换思路 。。。 我和TRDD一通乱搞、、、 过了一会大佬有思路了， 就是贪心， 每篇论文分一小时最优。 所以答案就是$(n+a) / 2$ 不敢相信的交了一发。 过了！ 过B题的时间是2小时17分 写完只有我去接着读我的C题， TRDD读了一下G题， 读完C题我瞬间发现这是一个模板题！ 裸的划分树。 跟大佬说了一下题意和做法， 恩没问题， 敲起。 C题题意， 给你n篇论文， 每篇论文的引用值为$a[i]$， 现在给你q个询问， 每个询问有一个区间$l, r$， 问让你从区间$l, r$中找到一个h， 使得至少有h篇的论文的引用值大于等于h。 写完划分树的板子， 恩。。。 测一下样例， 不对！ 大佬在旁边等不及了， 上来改bug。 三下五除二， 调过了。 交上去1A。 过C题的时间是2小时57分。 在我写C的时候， TRDD和大佬讨论出了G题， C题过了后紧接着开始写G。 我去开J题， 题意读懂后， 大佬要听题意， 叙述了一下， 我俩互换位置， 我负责继续写G， 大佬想J。G题思路很简单， 很快就写完了。 交上去， PE！！ 哇靠！ 一看代码有一个特判的No没写\n。 白白送了一发罚时。 过G题的时间是3小时20分. 大佬说J题应该是容斥什么的算一算（其实不是）。 让我和TRDD去想一想， 他去想别的题。 想了一个多小时， J题还是没想出来怎么搞， 到最后还有20分钟的时候， 我突然想到了正解，其实是我们忽略了一个关键点， 就是点的编号， 之前一直以为只是考虑这个点是0还是1， 其实还需要考虑他的编号。 我写了一下我的公式， TRDD推了一把样例， 发现答案对了！ 样例非常的良心， 有一个很大的数据， 这个大数据都对了基本就没问题了。 D题题意: 给一个有n的点的完全图， 编号0~n-1, 有A， B两个人， A会选一些边作为一个集合， B会选一些点作为集合， B选的点要能覆盖A所选边的集合。覆盖的定义： 一条边的两个点只要有一个被选就是被覆盖。并且每一个点有一个贡献， 第$i$个点的贡献是$2^i$, B要在覆盖A的前提下贡献和越小越好. 现在问A能选出多少种集合使得B最后选出的集合的贡献和等于K. 方案数$\% 10^9 + 7$ K以二进制的形式给出。 解法是考虑K这个二进制的01串， 把为0的放到一组， 为1的放到一组， 对于0内的不能互相连， 1内的随意。 0到1之间的就是要考虑对于1中的点， 他至少要连一个编号比他大的0， 对于编号比他小的0， 连不连都可以。 等我想出来正解的时候还有五分钟就结束了！！ 上去一顿猛敲， 思路已经飞了。。 写的代码也是又臭又长。。。 最后结束了没交上去。。 结束之后看了一下TRDD再旁边写的代码， 比我的短多了， 思路清晰， 交上去， AC。 果然在最后紧张时候最强压下头脑还是不够清醒。。 没办法理清逻辑。如果最后这题过了有可能从银到金了呢。 总结今天前期状态很不好， 三个人都不在状态， 而且题意也都是完全不读懂， 中期还比较稳定， 到了后期， 没有出最后一题， 有点遗憾。 还需要多加练习。我在写代码也不稳定， 导致罚时过多。 在6题里是中偏下排名。 有好几发是没有必要的罚时。]]></content>
      <categories>
        <category>比赛总结</category>
      </categories>
      <tags>
        <tag>比赛总结</tag>
        <tag>2018湘潭邀请赛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决最近博客的小问题]]></title>
    <url>%2F2018%2F05%2F18%2F%E8%A7%A3%E5%86%B3%E6%9C%80%E8%BF%91%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[解决了两个问题： http升级为https mathjax渲染挂了， 修复了mathjax的渲染问题。 昨晚写完博客发现数学公式不渲染了， 怎么更新修改都不行。 果断打开chrome的检查。 发现这样的错误： 去bootCDN的官网换了最新的版本链接， 问题还是无法解决。发现好像是我的域名不是https的原因。 因为官网旁边有这样一份说明: 拒绝流量劫持，全面使用 HTTPS！ 去同学的博客看了一下， 果然如此， 三个同学有两个的数学渲染也挂了， 他俩的域名都是http， 只有那个域名是https的渲染没问题。 找到问题的关键所在了。 恰好github最近也强制要求静态page博客必须且免费使用https了。 Custom domains on GitHub Pages gain support for HTTPS 这样的话， 只需要按照要求去github博客的仓库的setting中勾选Enforce HTTPS就可以了！ 如图所示： 我之前设置的是国内访问通过coding访问， 国外是github。 因此我又去阿里云域名解析设置把coding的dns关掉了， 默认全部使用github。 （当时用coding主要是为了能让百度爬虫爬到， 但是后来我发现github的也能爬到， 并不会被屏蔽） 本以为设置完HTTPS就可以正常渲染了， 但是还没有解决， 我觉得是短时间内bootCDN那边还是默认屏蔽我的， 要想渲染可能要等一段时间。 但是我不想等啊！！ 真正原因是被封了？？ V2EX - bootcss 的 cdn 把所有.cc 域名封了？ 就去mathjax的官网找到了官网的链接， 换掉了原来bootCDN的链接。 搞定！ 有人说官网在国内渲染会很慢，感觉渲染速度上并没有差异。只需要将配置cdn换成下面这个就可以了： 123456# MathJax Supportmathjax: enable: true per_page: true # cdn: https://cdn.bootcss.com/mathjax/2.7.4/MathJax.js?config=TeX-AMS-MML_HTMLorMML cdn: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018-5-15组队训练总结]]></title>
    <url>%2F2018%2F05%2F17%2F2018-5-15%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[今天做的题目是2017-2018 ACM-ICPC Nordic Collegiate Programming Contest (NCPC 2017)。 一共过了6道题， 分别是B,E,G,I,J,K. 总罚时891， 罚时很多，后面我会一一总结。 过程：一上来我先读了D题， 因为感觉题目比较短， 从数据范围看起来应该可做。 D题题意: 给n个长度相同的01串， $1\le n \le 10^5$, 串的长度不超过20. 现在让你构造一个01串s， 使得s和这n个串中01对应位置相同的个数最大值尽可能小。 （换句话说， 想让你构造一个01串使得s和这n个01串对应位置不相同的个数最大值尽可能的大。） 但是这道D题从头到尾都不会做， 赛后看了题解之后发现之前从没做过这样的题， 确实不太好想。 正确的做法: 把每一个01串转换成一个int型的整数作为一个点。 对于当前的01串改变一个位置的数相当于贡献+1， 建立一条边。 这样初始把n个串转换成点， 建立好边， 全部塞到BFS的队头， 跑完BFS后， BFS的最后一个点就是答案。 D题读了还没有一半， 一刷榜发现J题过了好几个队了， 赶紧放下D先看J， 简单扫了两遍之后发现确实很水， 三条判断就搞定了。 J题题意: 读入两个l， r 如果$l == r$ 输出 Even $l + r$， 如果$l \neq r$ 输出 Odd $max(l, r) \times 2$, 如果最大的为0输出Not a moose 在7分钟签到J题。 然后再看榜， 发现B题有人过， B题交给TRDD了， 全程不知道什么题意， 也是比较水的题目， 但是大佬没注意数据范围RE了一发， 然后在23分钟过了B题。 之后紧接着跟TRDD和大老说了一下D题的题意， 我去读G题。 读完了之后看大佬在认真的想D， 就没有跟他说， 我和TRDD在讨论G， 讨论了好一会， 发现要维护好多东西， 最后发现用树状数组再维护一些其他的东西就可以解决。 就去机位问大佬D题咋样， 顺便说了一下G题的题意和思路， 大佬觉得没问题， 就让我上G了， 写的过程中发现其实有一个数组变量是不需要维护的， 所以只需要一个树状数组+一个pos数组就可以维护了。 G题题意： 有n个队伍$1 \le n \le 10^5 $, m个事件$1\le m \le 10^5$， 之后m个事件以时间的顺序给出， 每个事件有两个值a, b,表示a队过了一道题用了B这么多的罚时。 现在问你对于每一个事件发生后， 1队排在第几名。 排名方式按照ICPC赛制。😂 赛后问女队用暴力做的， 我当时没敢写， 不会分析这种玄学情况的复杂度。 小飞他们用的set+vector也搞过了。。。 也不知道树状数组是不是正解。 在写G的过程中， TRDD发现I题可做， BFS找环即可， 跟大佬说了一下， 大佬觉得也没毛病。 1小时55分。 1A过G。 直接换上TRDD写I。 然后我去读K题， 读完之后只知道第一步需要二分一下， 二分之后如何check并没有思路。 过了一会大佬从想题(抽烟)回来， 我跟大佬说了一下K题的题意。 K题题意: 现在又三种人分别有a,b,c个， 每种人的力气值分别为$S_a, S_b, S_c$, 保证$a+b+c$为偶数， 现在一共有$m= \frac{a+b+c}{2}$个皮艇， 每个皮艇有一个值$C_i$ 现在让你给每个皮艇安排两个人p, q， 皮艇的速度$V = C_i \times (S_p + S_q)$, 想让速度最小的皮艇速度尽肯能大， 问你最小速度为多少。 当时K题过的人数并不多， 只有60+， 而D题有100+， 但是大佬听完题意后5分钟不到10分钟就想到了正解， 跟我说了一下之后我还思考了一会才慢慢接受觉得比较对， 没办法证明， 但是就是觉得挺对的。这时候TRDD还在改I题， 我在旁边构思K题怎么写， 构思了一会， 大佬让我去读E， 大佬帮着TRDDdebug， 暂时先放下了D。 2小时44分的时候， 第一次交I， Wa3， 继续调试， 我继续读E， 不过这个E题是真的难读， 各种陌生单词+地名。 绕过这些地名发现其实是一道图论题。 这时候TRDD再次交I， Wa43！！ 看来是有些小问题， 大佬让TRDD先下来在旁边查bug， 大佬开始搞K。 3小时2分。 K题1A。 在大佬写K的时候， TRDD发现了代码的错误， 大佬下来后立马上去改bug， 3小时7分过了I。紧接着我和大佬说了一下E题， 其实我脑子里还是没有一个完整的AC思路， 只知道是个图论需要BFS一下。 E题题意: 给一个n*m的矩阵 $1\le n, m \le 500$ $a[i][j] $ 表示海洋和的陆地$a[i][j] \ge 0$ 表示陆地， $a[i][j] \lt 0$ 表示海洋。 之后给你一个位置x行y列放一个抽水机， 每个点是八个方向联通， 问最多能抽出多少升的水。 具体做法就是用Dijstra跑一遍图， 每次弹出能抽出水最大的点， 去更新八个方向。 当然还需要初始化搞一搞。 但是这个题写的时候我在写check函数的时候只判了false没有return true。 导致Wa1 了两发。 而且差代码查了好久。。。。 我的坑。 总结：这次训练总的来说配合的还可以， 基本上没有出现卡题的情况， D题是真的想不到做法， 虽然过的人很多， 第一次接触这种思想。 太菜啦。 就是罚时太多了。 以后交题之前需要好好查一下输出对不对， 数据范围对不对， 花两分钟查一下， 总比罚时多20分钟强。 总结来说， 组队赛还是要配合好， 保持好心态，即使卡题了也不能心态蹦掉。 不然正常GG。]]></content>
      <categories>
        <category>比赛总结</category>
      </categories>
      <tags>
        <tag>比赛总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决javaFX import报错]]></title>
    <url>%2F2018%2F05%2F16%2F%E8%A7%A3%E5%86%B3javaFX-import%E6%8A%A5%E9%94%99%2F</url>
    <content type="text"><![CDATA[今天在机房电脑用eclipse和自己电脑的eclipse写javaFX的时候， 在import javafx.application.Application;之后都出现了报错。 解决方法： Project -&gt; Properties -&gt; libraries，先 remove 掉 JRE System Library，然后再 Add Library 重新加入。 原因：eclipse默认的jre是不会指定jfxrt.jar的，只能手工添加。所以需要重新手动导入JRE。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>解决问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim操作命令学习整理]]></title>
    <url>%2F2018%2F05%2F15%2Fvim%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[日常记录容易忘记的Vim指令 首先是这两个符号： ^表示行的开头。 $表示行尾。 这样可以通过:num1,num2s/old/new/g的替换命令实现快速在多行行首和行尾插入。 比如在cpp文件中想在1到5行添加//进行注释， 那么命令就是 1:1,5s/^/\/\//g 因为\符号需要转义， 所以连个\\的注释需要写成\/\/. 当然我们也可以通过命令快速取消注释 1:1,5s/^\/\///g 也可以使用shift+V快速选中多行在视图模式下直接按:, 会自动补全:&#39;&lt;,&#39;&gt; 这时候只需要输入后面的命令就可以实现将选中的行进行快速操作。 快速注释已选中的行： 1:'&lt;,'&gt;s/^/\/\//g 快速取消注释 其实以上几条命令不加后面的/g效果也是一样的, 因为每一行只有最开头有一个^符号。 比如下面这样 取消选中行的注释 1:'&lt;,'&gt;s/^\/\/]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018-5-8组队训练总结]]></title>
    <url>%2F2018%2F05%2F12%2F2018-5-8%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[今天的训练赛题目是2017 Benelux Algorithm Programming Contest (BAPC 17). 总的来说打的非常挫， 比赛的时候只过了三道题，主要是我的失误， D题题意读错， I题规律推挫了， 导致卡题从头卡到尾， 跟去年西安区域赛的感觉非常像了。 如果不卡题的话正常来说是可以过6~7题。 比赛前一个小时因为要去听一个讲座， 迟到了一个小时， 等我来的时候， TRDD和大佬已经过了F和A题。来了之后我先读了K题。 K题题意: 有n个人 编号0~n-1 $(1 \le n \le 1000)$, 之后给一个n*n的矩阵a， $a[i][j]$ 有三种符号0 1 X。 0表示i会输给j, 1 表示i赢j, X表示自己。 现在让你给这n个人安排一个比赛顺序， 第一个人默认是擂台主， 第一个先跟第二个打， 谁赢了谁成为擂主， 擂主再跟第三个人打… 以此类推， 现在你想让0号选手赢， 让输出这样一个序列， 如果不行， 输出impossible。 刚开始大佬想到用DFS找到一个长度为n的序列， 然后输出， 我觉得这样肯定会TLE， 就否定了大佬， 然后又仔细想了一下， 突然想到， 只要跑出一个BFS序就可以了， 对于第i层， 不管第i+1层的人怎么安排， 肯定第i层的人会胜利。 所以只需要以0号点跑BFS， 看是否能跑出n个点就可以了。 在1h54分的时候过了K， 之后的三个小时， 我们就卡题卡到绝望。 紧接着我读的I， TRDD读的D， 但是这两道题的题意都不是很好理解。 I题题意: 给一个n*m的黑白相间的巧克力， 左上角是黑色的， A和B两个人分别切巧克力， A可以从左边选择往右选择任意长度的列且给自己， B可以从下往上切任意长度的行给自己， 每次切完后自己获得黑个数-白个数的分数。 现在A想让他俩分数的差值尽可能大， 问最大差值能有多大。 这个题我一直被中间的某一段迷惑， 因为文中有提到两个人都想获得尽可能多的黑巧克力， 然而这个信息是没有用的， 我却往这个方向走偏了。刚开始我发现n为偶数的时候肯定是0， n和m都是奇数的时候答案为1， n为奇数m为偶数， 我刚开始直接输出2 。 Wa28组， 后来怎么改都改不过。。。。 到最后学弟告诉我需要判断一下n和m的大小 n &gt; m是0 n &lt; m是2。。。。难受 找不出这个规律。 然后是D题，，， 也是题意读错了， 导致大佬写的最短路Wa3找不出错感到绝望。正确的题意是这样的： D题题意: 给一个n个点$1 \le n \le 10^5 $编号从0开始, m条边$1\le m \le 10^6$的无向图， 现在你要做大巴从0号点到1号点， 但是发现大巴不会走有路标指向的道路（意思是路标是有方向的）。 让你输出一条大巴走的路线。定义： 如果当前这个点走这条边是到达1号点的最短路径， 那么这条路的方向就会被放上路标。 解题思路： 正解是从1号点开始用Dijstra跑一遍最短路求得每一个点到一号点的最短距离。 然后再跑一遍BFS删掉（标记）哪些边是有路标的边， 之后再从0号点跑一遍BFS输出即可。 比赛当时这道题题意理解挫了， 以为只有0到1的最短路不能走， 然后标记上跑一个BFS， 死活不对， 比赛结束之后问了学长才明白题意。 卡题的这三个小时， 我们没读其他题， 其实如果开其他题的话L题是可做的， 思路很好像， E题应该也可做， 以大佬的脑力解决没问题。 但是。。。 我没压根就没读题。。。。这场比赛就以三题结束了。。 L题和E题先挖坑。。。 有空在写。]]></content>
      <categories>
        <category>比赛总结</category>
      </categories>
      <tags>
        <tag>比赛总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018-5-5组队训练总结]]></title>
    <url>%2F2018%2F05%2F07%2F2018-5-5%E7%BB%84%E9%98%9F%E8%AE%AD%E7%BB%83%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[今天打得题是SWERC 2017西欧区域赛的题目， 一共过了4道题， 分别是A， E， F， J。 最后卡了K没过。 模拟现场榜单的话排31， 大概是铜上游的位置吧。 过程首先上来我先读的C题， 题意比较短， 但最后发现是个很难的题， C题目大意： 给一个$n \times m $ 的矩阵，$(1\le n \le 8, 1\le m \le 10^ {18})$ 让你用$1\times1$ 或者$1\times2$或者$2\times1$的方格全部铺满， 不能覆盖， 问方案数模$10^ 9$ 题还没读完的时候， 发现F是道水题， 4分钟的时候有三个一血。。 正好TRDD在读F， 所以我就继续看C。TR跟大佬叙述了题意之后， 应该是没太理清题意， 大佬思考了一下发现题目并不简单， 甩给我又重读了一遍， 发现漏了一个重要条件（就是n个矩形是由大的$W \times L$分出来的）。 F题目大意： 一个$W \times L\ \ (1 \le W, L \le 10\ 000)$的矩形被分成了n$(1 \le n \le 5\ 000\ 000)$块小矩形， 这n个矩形的长宽分别为$w_i, l_i (1\le w_i, l_i \le 10\ 000)$. 给定W， 输出L。 F题在19分钟过的。 这时候许多队已经过了F了， 而且安神也已经两题了。 大佬在写F的时候， 我瞅了一眼榜， 发现J题有人过， 并且题意很好懂， 大佬写完F后立刻跟大佬说了题意， 大佬也秒想出了做法。 开始敲起。 J题大意： 把一个大矩阵横着分成n段每段的长度为$a_i $， 竖着分成n段， 每段的长度为$b_i $， 现在有三种颜色 0、 1、 2。 对于第$[i, j]$块， 他被涂成$(i+j) \% 3$的颜色， 最后问0 1 2 三种颜色分别的面积是多少。 在第26分钟， 过了J题， 算一算， 从大佬过了F题到过了J题用了7分钟， 总的来说这题过的还是很顺利的。 这时候看了一下榜单， A题第三容易的题， TRDD在读A， 我问他咋样， 他把题面甩给我一看， 题目巨长， 让我读吧， 在读A之前我趁这个空把C题的题意跟大佬说了一把， 虽然没人过， 总比大佬挂机没有题想要好。这个时候E和K都有人过， 让TRDD随便挑一题去读， 挑了个K。A题虽然题目长， 但是整体思路比较好懂， 很快就读完了， 并跟大佬叙述了题意。 A题大意： 有一个烤箱， 有一个入口一个出口， 现在在入口和出口各放一个检测器， 蛋糕通过时会做记录， 烘焙蛋糕的时间是一个定值， 现在这个检测器有些毛病， 没蛋糕通过他可能会记录， 有蛋糕通过他也可能不记录， 现在给你两个长度为n和m$1\le n, m \le 2\ 000$的数组， 第一个数组是入口检测器监测到有蛋糕的时间， 第二个数组是监测到有蛋糕经过出口的时间，时间$0\le t \le 10 ^9$ 当然这连个数组的时间不准确， 现在让你猜测最完美烘焙时间是多长， 使得完美烘焙的蛋糕数量尽可能多。输出你猜测的最佳烘焙时间，如果有多个， 输出小的。 但是叙述完题意之后我和大佬都感到疑惑， 题目真的是这个意思么？ 那也太水了吧， 暴力一搞就出来了， 为了以防万一， 我让大佬先写着， 我再读一遍确定一下题意， 发现还是这个题意， 便让大佬交了一发， 然后A题就一脸懵逼的过了。 这时候只有E和K暂时来看是可做的， 然后我选择了题目巨长的E， TRDD读K。 题目太难叙述了。。。 不想写了。 👻 E题题意确实有些繁琐， 以至于我读懂之后跟大佬叙述题意的时候我俩思维就没在一个频道上， 他说了一下他的解法之后我也没太注意。 导致了大佬写完之后样例过不去， 经过我再一次讲解题意， 发现后面基本写偏了， 还好刚开始建树求每种pizza的思路是对的。 经过讨论之后发现是一个01背包， 这时候大佬作为惩罚让我写01背包， 他去趟厕所， DP巨挫的我有点慌张， 让谭瑞来在旁边看着我写的对不对， 然而！！ 还是写挫了。。。。 大佬从厕所回来后发现我还没有AC把我赶下了机位。。。 改了几下，交上去，TLE了！ 想了一下， n^2 的背包应该不会T。 应该是因为用cin读字符串来导致的， 然后我建议大佬用scanf读进来再塞到string中取， 然后交上去AC了。 这时候TRDD跟我和大佬说了一下K题的题意， 一道几何题。 K题大意： 给一个半径为R的蛋糕（基本没用）， 给n个点表示蜡烛， 每个蜡烛坐标$x_i, y_i $， 现在让你一次吹灭所有的蜡烛， 吹风的横截面最小是多少。 平时很少做几何的题， 刚开始想肯定需要先求个凸包， 然后再在凸包上瞎搞一搞， 然后我想到了先求出第一条边最远的点在哪， 然后逆时针移动边的时候， 点也是跟着逆时针移动的， 可以在$O(n)$复杂度下求解， 后来我才知道这个算法(思路)是旋转卡壳。。。 大佬想了一下， 觉着没什么问题， 就让TRDD抄凸包的板子， 我在旁边整理如何求解。后来TRDD把凸包的一个函数的int返回值写成了bool类型， 导致我俩查板子还查了好一会， 然后我就开始抄点积叉积乱七八糟的各种板子。 写完之后测了一下样例， 都过了， 交了一下wa2。大佬查了一下代码， 发现最后一条边跑不到， 改了一下并且控制了一下精度问题， 交了一发wa10！！ 这个时候只剩一个小时了， 我们三个一致觉得是精度问题， 开始疯狂考虑精度问题（赛后发现其实并不是， 而是少了一个特判！！） 各种改， 怎么改都是wa10， 如果几何题做得多的话其实应该可以意识到这不是精度问题的。 最后我们以四题结束了比赛， 晚上我补题的时候，我还觉着是精度的问题， 便重新写了一遍， 而且看了刘汝佳的蓝书和挑战程序设计白书的几何部分， 结果还是wa10！！ 一气之下我去看了安神的代码， 发现他们也wa10过， 我就看他们wa10前后两组的代码有什么不同， 发现在跑完凸包之后需要特判凸包里的点数如果&lt;=2的话 要输出0！ 我把这个条件加上去 就AC了！！！！ 把比赛时候写的第二发代码加上交上去 也AC了！！！ 所以根本就不是精度问题！ 就是自己考虑少了。。。 😭 总结：今天的比赛刚开始第一题签到题不太顺利， 比别人慢了许多， 之后的三题都是比较顺利的，不论是读题速度方便， 还是大佬想题和写题的速度都很快， 我们三个一起debug的时候意见也很统一， 就是最后的K题， 三个人一起跑偏了。。。 组队配合还需要多加练习。以后每场组队赛之后争取都写一下训练总结并把题补好， 为下学期区域赛做准备！]]></content>
      <categories>
        <category>比赛总结</category>
      </categories>
      <tags>
        <tag>比赛总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法学习-划分树]]></title>
    <url>%2F2018%2F04%2F15%2F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E5%88%92%E5%88%86%E6%A0%91%2F</url>
    <content type="text"><![CDATA[前两天在白书上学习了归并树， 是用了线段树+归并排序的思想在$O(log^3 (n))$复杂度下查找区间k大。 今天学习的划分树则可以在$O(log(n))$的复杂度下查找区间第k大。 划分树正好是归并树反过来了， 他用的是线段树+快速排序的思想。 快速排序我们先来复习快速排序的方法： 对于当前要排序的区间， 我们随机找一个数作为基础值， 分别用两个指针l和r 把基础值放在最左边。 r指针先往左移， 碰到一个比基础值小的a[r]， 交换a[r]和基础值， 让l往右移动， 直到碰到一个值[l]比基础值， 交换a[l]和基础值， 重复第二步， 直到l == r. 将基础值左边和右边的区间分别继续快速排序， 直到区间内只有一个值。 划分树划分树就是用线段树记录每一层快速排序的状态， 用sort快速排序作为辅助，将排好序的数组放到sorted[]内， 每次排序区间[l, r]时， 用sorted[(l+r)/2]作为基础值， 这样使得下一层左右两个区间尽长度尽可能相同。 我们用tree[20][n]来记录每一层快速排序的状态， 用toleft[dis][i]记录第dis层前i个值有多少个在下一层进入了左区间。 划分树也分为两部分： 1. 初始化操作对于每一个要排序的区间[l, r]， 将基础值设为sorted[(l+r)/2], 如果值小于基础值则放到下一层的左边， 否则放到下一层的右边区间， 但是这样不能保证左右区间尽可能长度相同， 主要是有很多个值都等于基础值， 这个时候就要将灵活处理一下： 用same记录当前和基础值相同的个数， same初始等于下一层左区间长度， 左区间每放一个小于等于基础值的数， same--， 直到same == 0 的时候， 剩下相等的就只能放到右边区间了。 最后顺便更新有多少个移到了下一层的左区间。 继续递归进行Build操作。 12345678910111213141516171819202122232425262728293031// 初始化区间[l,r]void Build(int dep, int l, int r) &#123; if(l == r) return; int mid = (l + r) &gt;&gt; 1; int same = mid - l + 1; for(int i = l; i &lt;= r; i++) if(tree[dep][i] &lt; sorted[mid]) same--; int lpos = l; int rpos = mid + 1; for(int i = l; i &lt;= r; i++) &#123; if(tree[dep][i] &lt; sorted[mid]) &#123;// 小的值直接放到左儿子 tree[dep + 1][lpos++] = tree[dep][i]; &#125; else if(tree[dep][i] == sorted[mid] &amp;&amp; same &gt; 0) &#123; // 左儿子还有空能放相同的数 tree[dep + 1][lpos++] = tree[dep][i]; same--; &#125; else tree[dep + 1][rpos++] = tree[dep][i]; // 剩下的大于等于的放到右儿子 toleft[dep][i] = toleft[dep][l - 1] + lpos - l; // 更新有多少个数放到了左边 &#125; Build(dep + 1, l, mid); Build(dep + 1, mid + 1, r);&#125;void Init() &#123; for(int i = 1; i &lt;= n; i++) &#123; scanf("%d", &amp;a[i]); sorted[i] = tree[1][i] = a[i]; &#125; sort(sorted + 1, sorted + n + 1, cmp); Build(1, 1, n);&#125; 2. 查询操作查询[ql, qr]的第k大， 如果当前区间[l, r]下一层往左的个数即toleft[dep][qr]-toleft[dep][ql-1] &gt;= k的话， 说明第k大的数肯定在下一层的左区间， 并且更新查询区间。 newl为 当前的L + (L到ql中去了下一层左区间的个数， 他们不再查询范围内， 要加上）。 newr则为 newl + cnt - 1。 否则的话 说明第k大在下一层的右区间， 同理也需要更新查询区间。 继续查询。 newr为当前的qr 加上qr外面即（qr到R中到了下一层左边的个数）。 newl同理 newr就是往前（查询长度 - 要查询中去了下一层左边的个数）， 同时查询的个数也要减去cnt。 当区间只有一个值的时候， 为第k大， return即可。 1234567891011121314151617// 询问[ql, qr] 中第k大的数 // 外部调用query(1, 1, n, l, r, k);int query(int dep, int L, int R, int ql, int qr, int k) &#123; if(ql == qr) return tree[dep][ql]; int mid = (L + R) &gt;&gt; 1; int cnt = toleft[dep][qr] - toleft[dep][ql - 1]; if(cnt &gt;= k) &#123; int newl = L + toleft[dep][ql - 1] - toleft[dep][L - 1]; int newr = newl + cnt - 1; return query(dep + 1, L, mid, newl, newr, k); &#125; else &#123; int newr = qr + toleft[dep][R] - toleft[dep][qr]; int newl = newr - (qr - ql - cnt); return query(dep + 1, mid + 1, R, newl, newr, k - cnt); &#125;&#125;]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法学习-归并树]]></title>
    <url>%2F2018%2F04%2F11%2F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E5%BD%92%E5%B9%B6%E6%A0%91%2F</url>
    <content type="text"><![CDATA[用一句话定义归并树就是用线段树记录归并排序时每一层每一段数组的状态。 用途： 归并树可以在$O(log(n)^2 )$复杂度查找区间[l,r]比x小的有几个. 那么就可以通过二分枚举在$O(log(n)^3 )$复杂度实现查找区间[l,r]第k大的值. 我们先回顾一下归并排序的具体实现方法： 归并排序依靠递归的思想， 每次把当前要排序的区间分成尽可能相等的两部分， 左右两部分分别进行归并排序， 之后再将排好序的左右两个区间合并。 当区间长度为1的时候， 停止递归。 复杂度分析： 因为每次将当前序列分成两部分递归， 最多分$O(log(n))$层, 每层有n个元素, 所以归并排序的复杂度是$O(nlog(n))$. 归并排序最常用的就是求逆序对的个数， 其实用树状数组也可以在相同的复杂度下求出逆序对。 c++实现代码： 123456789101112131415161718192021//参考紫书算法竞赛入门经典 void merge_sort(int *A, int l, int r, int *T)&#123; //[l, r) 排序. 外部调用区间为[0, n) if(r - l &gt; 1)&#123; int mid = l+(r-l)/2; int p = l, q = mid, now = l; // 对左右两部分区间分别归并排序 merge_sort(A, l, mid, T); merge_sort(A, mid, r, T); // 合并左右两部分 while(p &lt; mid || q &lt; r)&#123; if(q &gt;= r || (p &lt; mid &amp;&amp; A[p] &lt;= A[q]))&#123; T[now++] = A[p++]; &#125; else&#123; T[now++] = A[q++]; cnt += mid - p; // cnt记录的是逆序对个数 &#125; &#125; for(int i = l; i &lt; r; i++) A[i] = T[i]; &#125;&#125; 以上是对归并排序的复习， 下面继续学习归并树。 先说一下归并树的大致思想， 用vector维护出每一个节点的区间[l,r)排完序之后的数组, 每次查询的时候, 分三种情况. 如果要查询的区间和当前的区间没有交集, 返回0个. 如果要查询的区间完全包含了当前的区间， 用二分搜索对于当前节点保存的数组进行查找。 负责的话递归左右儿子查找并且求和。 根据归并排序的思想， 要先初始化归并树， 原理同归并排序， 只不过把数组的值都存起来了， 每次询问的时候， 分上面说的三种情况就可以了。 具体看下面这一道例题以及模板代码。 模板例题： 2104 - K-th Number 123456789101112131415161718192021222324252627282930313233343536373839// 代码参考白书(挑战程序设计竞赛)const int MAXN = 1e5;const int ST_SIZE = (1 &lt;&lt; 18) - 1;int n, m;int a[MAXN+5], num[MAXN+5];// num用来存a排好序之后的数组， 方便二分vector&lt;int&gt; dat[ST_SIZE];// 初始化归并树， 原理和归并排序一样， 区间[l, r)void init(int k, int l, int r)&#123; if(r - l == 1)&#123; dat[k].push_back(a[l]); &#125; else&#123; int lch = k * 2 + 1, rch = k * 2 + 2; init(lch, l, (l+r)/2); init(rch, (l+r)/2, r); dat[k].resize(r-l); merge(dat[lch].begin(), dat[lch].end(), dat[rch].begin(), dat[rch].end(), dat[k].begin()); // 利用STL自带的merge函数把两个儿子的数列合并 &#125;&#125;// 计算[ql, qr) 中不超过x的个数// k是节点的编号, 对应区间[l, r)int query(int ql, int qr, int x, int k, int l, int r)&#123; if(qr &lt;= l || r &lt;= ql)&#123;//完全不相交 return 0; &#125; else if(ql &lt;= l &amp;&amp; r &lt;= qr)&#123; // 询问完全包含当前区间 return upper_bound(dat[k].begin(), dat[k].end(), x) - dat[k].begin(); &#125; else&#123; int lcnt = query(ql, qr, x, k*2+1, l, (l+r)/2); int rcnt = query(ql, qr, x, k*2+2, (l+r)/2, r); return lcnt + rcnt; &#125;&#125;]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Mac中将chrome商店下载的插件导出为crx]]></title>
    <url>%2F2018%2F03%2F25%2F%E5%9C%A8Mac%E4%B8%AD%E5%B0%86chrome%E5%95%86%E5%BA%97%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%8F%92%E4%BB%B6%E5%AF%BC%E5%87%BA%E4%B8%BAcrx%2F</url>
    <content type="text"><![CDATA[Mac下Chrome的插件保存在~/Library/Application\ Support/Google/Chrome/Default/Extensions/对应ID下。 通过下面两行命令我们可以看到每个插件的命名都是他固定的ID。 也就是在chrome浏览器中扩展程序里显示的ID。 12cd ~/Library/Application\ Support/Google/Chrome/Default/Extensions/ls 12cd 对应插件的IDls 这时候可以看到这个软件的版本， 再cd版本号 12cd 对应版本号pwd 使用pwd显示当前路径， 然后复制该路径。 粘贴到chrome-&gt;扩展程序-&gt;打包扩展程序。点击打包扩展程序这时候.xrc文件就会生成到对应目录下， 结束！]]></content>
      <categories>
        <category>Mac技巧</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>chrome插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[想把博客部署到Coding上? 看完再决定]]></title>
    <url>%2F2018%2F03%2F19%2F%E6%83%B3%E6%8A%8A%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Coding%E4%B8%8A-%E7%9C%8B%E5%AE%8C%E5%86%8D%E5%86%B3%E5%AE%9A%2F</url>
    <content type="text"><![CDATA[我想大多数人想把博客同时部署到Github和Coding上的目的基本都一样： 加快国内访问速度 能够被百度收录 我主要是奔着被百度收录进来的， 因为Github已经屏蔽了百度的爬虫， 所以想要被百度收录， 只好另寻他路， 网上有人说可以同时部署到gitcafe上， 可是一查， gitcafe早在2016年3月就被Coding并购了, 所以目前最好的办法就是同时部署到Github和Coding上了. 但是!! 但是!! Coding其实也坑的很. 首先Coding分为了四种会员:普通会员、银牌会员、金牌会员和钻石会员。 我想基本上每个人都使用了自己的域名了吧， 第一个坑点就是:你想绑定自己的域名, 必须是银牌会员。这个银牌会员是免费的， 只需要你完善个人信息就可以了。 但是你以为这样就结束了吗？ 并没有， 看官方的介绍说： 银牌会员是受限的pages自定义域名。 金牌及以上才是完全的自定义域名。我们来看看银牌是如何受限的： 银牌会员的 Coding Pages 在访问时默认会先加载 Pages 跳转页，您可选择在网站首页任意位置放置「Hosted by Coding Pages」的文字版或图片版，然后勾选下方的「已放置 Hosted by Coding Pages」选项，通过审核后您的 Pages 将不会显示跳转页。请务必将「Hosted by Coding Pages」持续保留在网站首页，撤掉后跳转页会再次出现。 意思就是说你使用自定义域名可以， 但是先帮我们弹一个页面， (打个广告). 这首先就影响了用户的体验， 并且， 百度爬虫也是爬不到的， 因为第一次访问到的是他的广告页面。并且最近(2018-3-19)我发现跳转的这个页面无法访问了， 所以每当第一次进入博客就会转到coding/404。之后再进一次就是正常的博客了， 但是你只要清除浏览器数据、缓存， 再次登录 又是404。体验更是糟糕。 我才猛的想起来前几天看了一些人的博客打开就是coding的404， 我以为是他们的博客不用了， 现在想想原来是coding搞的鬼。 当然coding显然意识到了这样体验实在是太差了， 当然有别的选择， 在你的博客上帮他打广告！ 只要你在博客首页放上coding要求的文字或者图片并且通过审核， 就可以不用页面跳转了。 我今天刚刚提交申请， 说是在两个工作日完成审核。 我文字放在了最下面： 第二天更新：我是昨天下午提交审核的， 今天早晨下课一看已经通过审核了。 可以通过Coding正常访问了， 不会跳出中转页面。 紧接着我就去阿里云设置dns， 将github的设置为境外， coding为默认。 然后去了站长工具dns检测 。 可以看出大陆的都是通过coding访问的， 国外的是通过github访问的。 当然我最关心的问题还是百度收录的问题，去百度平台看了一下， 发现之前提交的站点地图在昨晚11点半的时候竟然有抓取记录， 不懂这是在干嘛， 百度搜了一下我的域名还是搜不到， 又去抓取诊断里试了一下， 咦！ 竟然能被抓取到了。但是试了几次不是百分百成功。 网上都说被百度收录是一个漫长的过程， 那我就先慢慢等待。]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建博客遇到的坑]]></title>
    <url>%2F2018%2F03%2F11%2F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[待解决问题首页预览行数控制问题。配置第三方服务。 （评论， 数量统计之类的)是否能把csdn的博客迁过来。 （不打算搬了， 分开写不同的东西）about页面的一些美化让百度google能够搜索 （谷歌已经解决， 百度貌似被github屏蔽了）每一篇文章阅读量多台电脑管理博客， 参考博客共同管理站点让文章可以置顶 已解决问题 侧栏链接图标配不上去问题&#160; &#160; 教程中说的是 在主题配置文件中的social_icons中添加网站的名称, 但是试了很多次都不成功.&#160; &#160; 解决办法: 发现在social也就是贴链接的位置 后面默认会有两个竖杠|| , 正确做法是在||后面粘贴图片的名字. 12345social: GitHub: https://github.com/ZZZZone || github 微博: http://weibo.com/_ZZZZone || weibo 知乎: http://www.zhihu.com/people/zzzzone-87 || bolt codeforces: http://codeforces.com/profile/ZZZZone || fort-awesome mathjax渲染问题更新， 请不要使用删除线中的方法 &#160; &#160; 网上找了很多方法, 不停地uninstall,install, 已经忘记了hexo默认给的是什么软件渲染的了.&#160; &#160; 最后使用的是markdown-it, 虽然在next主题的TOC显示上面会有一些问题, 牺牲一下吧. 毕竟写题解的时候公式很重要。 暂时先使用这种方法。markdown-it &#160; &#160; 之前一直使用的是markdown-it, 问题就是TOC有问题并且在主页无法使用&lt;!-- more --&gt;来设置阅读全文.&#160; &#160; 解决方法: 经过一番搜索, 发现了另一个软件, 叫hexo-renderer-kramed，完美解决了这个问题。参考博客: 林肯先生的blog。 具体做法这篇博客已经详细介绍了。 评论插件在尝试了gitment和来必力之后, 我选择了来必力. 使用比较简单， 因为gitment我没有解决issue过长导致异常的问题。 而且gitment只能使用github账号登陆， 对于我这种基本没有评论的人来说被评论的机会就更小了， 所以最终选择了来必力。使用法法: 在来必力官网注册一下， 因为我是用的是next5.1.4版本， 配置中已经集成了许多插件， 不需要自己再去修改文件了， 只求要去改一改配置就行了。 在主题目录中的配置文件搜索livere_uid: 在这里填上你申请的来必力代码中有一串ID， 就可以了。 更新： 把来必力换掉了。 换成Valine了， 更简约， 使用起来更方便。 使用的跟文章浏览人数同样的管理平台， 数据管理起来也比较方便。 可以到next主题目录下的配置文件中的valine写好对应的id和key就可以了。 具体教程参考： valine官方文档 文章阅读量显示这个很好弄， 照着教程解决就可以了链接在此 使用自己的域名在阿里云上1块钱一年的.top域名。 觉得很实惠， 就买了一个。 按照百度上的做法配置了域名之后， 发现只能用chrome浏览器访问， 手机和电脑都是。 电脑用Safari找不到服务器， 手机用了via浏览器一直显示dnserror， 百度了一下说是DNS劫持？ 果断把电脑了DNS从114.114.114.114换回了默认， 手机浏览器清了一下cookie什么的， 解决。 所有浏览器正常访问。 博文置顶🔝github上有这样的仓库了，原仓库替换了hexo自带的置顶， 挺好用的。 执行下面两行命令： 12$ npm uninstall hexo-generator-index --save $ npm install hexo-generator-index-pin-top --save 之后只需要在文章的front-matter中添加top: ture就可以将博文置顶了。后来我又发现， 使用top: 数值 会按数值降序置顶排序。 next主题支持在front-matter中添加sticky: true来显示置顶标志（一个小Pin）。 将博客部署到coding 上参考博客Hexo博客部署到GitHub和Coding我部署到coding上主要是为了解决百度无法爬去github。首先是在coding上注册账号， 然后创建一个工程， 工程名称和你的用户名一样， 避免css之后渲染出问题。给coding配置ssh秘钥。 在终端中执行ssh -T git@git.coding.net 检验是否配置成功。然后在站点的配置文件 _config.yml 中添加coding的ssh路径. 仿照github中的方法配置。然后执行 三命令， 就可以将博客部署到coding上。去阿里云修改dsn解析。 将之前github的dsn 修改为海外 。 然后再添加coding。最后再去coding的仓库pages服务， 添加静态pages。 并添加自定义域名。 我手动添加了zzzzone.top和www.zzzzone.top两个域名。 最后我在/Users/zong/Documents/hexo/themes/next/layout/_partials中]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
